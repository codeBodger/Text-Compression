def uni2bin(uniStr):  #Takes in a String, outputs it in binary
	return str(''.join('{0:08b}'.format(x, 'b') for x in bytearray(uniStr, 'utf-8')))

def bin2uni(binStr):
  return bytearray(int(binStr[x:x+8], 2) for x in range(0, len(binStr), 8)).decode('utf-8')


def bin2asc(binStr):  #Takes in an 8 bit binary string, outputs it in extended ascii
  asciiLookup = {  #The lookup table to be used
    '00000000': '\x00', 
    '00000001': '\x01', 
    '00000010': '\x02', 
    '00000011': '\x03', 
    '00000100': '\x04', 
    '00000101': '\x05', 
    '00000110': '\x06', 
    '00000111': '\x07', 
    '00001000': '\x08', 
    '00001001': '\x09', 
    '00001010': '\x0a', 
    '00001011': '\x0b', 
    '00001100': '\x0c', 
    '00001101': '\x0d', 
    '00001110': '\x0e', 
    '00001111': '\x0f', 
    '00010000': '\x10', 
    '00010001': '\x11', 
    '00010010': '\x12', 
    '00010011': '\x13', 
    '00010100': '\x14', 
    '00010101': '\x15', 
    '00010110': '\x16', 
    '00010111': '\x17', 
    '00011000': '\x18', 
    '00011001': '\x19', 
    '00011010': '\x1a', 
    '00011011': '\x1b', 
    '00011100': '\x1c', 
    '00011101': '\x1d', 
    '00011110': '\x1e', 
    '00011111': '\x1f', 
    '00100000': '\x20', 
    '00100001': '\x21', 
    '00100010': '\x22', 
    '00100011': '\x23', 
    '00100100': '\x24', 
    '00100101': '\x25', 
    '00100110': '\x26', 
    '00100111': '\x27', 
    '00101000': '\x28', 
    '00101001': '\x29', 
    '00101010': '\x2a', 
    '00101011': '\x2b', 
    '00101100': '\x2c', 
    '00101101': '\x2d', 
    '00101110': '\x2e', 
    '00101111': '\x2f', 
    '00110000': '\x30', 
    '00110001': '\x31', 
    '00110010': '\x32', 
    '00110011': '\x33', 
    '00110100': '\x34', 
    '00110101': '\x35', 
    '00110110': '\x36', 
    '00110111': '\x37', 
    '00111000': '\x38', 
    '00111001': '\x39', 
    '00111010': '\x3a', 
    '00111011': '\x3b', 
    '00111100': '\x3c', 
    '00111101': '\x3d', 
    '00111110': '\x3e', 
    '00111111': '\x3f', 
    '01000000': '\x40', 
    '01000001': '\x41', 
    '01000010': '\x42', 
    '01000011': '\x43', 
    '01000100': '\x44', 
    '01000101': '\x45', 
    '01000110': '\x46', 
    '01000111': '\x47', 
    '01001000': '\x48', 
    '01001001': '\x49', 
    '01001010': '\x4a', 
    '01001011': '\x4b', 
    '01001100': '\x4c', 
    '01001101': '\x4d', 
    '01001110': '\x4e', 
    '01001111': '\x4f', 
    '01010000': '\x50', 
    '01010001': '\x51', 
    '01010010': '\x52', 
    '01010011': '\x53', 
    '01010100': '\x54', 
    '01010101': '\x55', 
    '01010110': '\x56', 
    '01010111': '\x57', 
    '01011000': '\x58', 
    '01011001': '\x59', 
    '01011010': '\x5a', 
    '01011011': '\x5b', 
    '01011100': '\x5c', 
    '01011101': '\x5d', 
    '01011110': '\x5e', 
    '01011111': '\x5f', 
    '01100000': '\x60', 
    '01100001': '\x61', 
    '01100010': '\x62', 
    '01100011': '\x63', 
    '01100100': '\x64', 
    '01100101': '\x65', 
    '01100110': '\x66', 
    '01100111': '\x67', 
    '01101000': '\x68', 
    '01101001': '\x69', 
    '01101010': '\x6a', 
    '01101011': '\x6b', 
    '01101100': '\x6c', 
    '01101101': '\x6d', 
    '01101110': '\x6e', 
    '01101111': '\x6f', 
    '01110000': '\x70', 
    '01110001': '\x71', 
    '01110010': '\x72', 
    '01110011': '\x73', 
    '01110100': '\x74', 
    '01110101': '\x75', 
    '01110110': '\x76', 
    '01110111': '\x77', 
    '01111000': '\x78', 
    '01111001': '\x79', 
    '01111010': '\x7a', 
    '01111011': '\x7b', 
    '01111100': '\x7c', 
    '01111101': '\x7d', 
    '01111110': '\x7e', 
    '01111111': '\x7f', 
    '10000000': '\x80', 
    '10000001': '\x81', 
    '10000010': '\x82', 
    '10000011': '\x83', 
    '10000100': '\x84', 
    '10000101': '\x85', 
    '10000110': '\x86', 
    '10000111': '\x87', 
    '10001000': '\x88', 
    '10001001': '\x89', 
    '10001010': '\x8a', 
    '10001011': '\x8b', 
    '10001100': '\x8c', 
    '10001101': '\x8d', 
    '10001110': '\x8e', 
    '10001111': '\x8f', 
    '10010000': '\x90', 
    '10010001': '\x91', 
    '10010010': '\x92', 
    '10010011': '\x93', 
    '10010100': '\x94', 
    '10010101': '\x95', 
    '10010110': '\x96', 
    '10010111': '\x97', 
    '10011000': '\x98', 
    '10011001': '\x99', 
    '10011010': '\x9a', 
    '10011011': '\x9b', 
    '10011100': '\x9c', 
    '10011101': '\x9d', 
    '10011110': '\x9e', 
    '10011111': '\x9f', 
    '10100000': '\xa0', 
    '10100001': '\xa1', 
    '10100010': '\xa2', 
    '10100011': '\xa3', 
    '10100100': '\xa4', 
    '10100101': '\xa5', 
    '10100110': '\xa6', 
    '10100111': '\xa7', 
    '10101000': '\xa8', 
    '10101001': '\xa9', 
    '10101010': '\xaa', 
    '10101011': '\xab', 
    '10101100': '\xac', 
    '10101101': '\xad', 
    '10101110': '\xae', 
    '10101111': '\xaf', 
    '10110000': '\xb0', 
    '10110001': '\xb1', 
    '10110010': '\xb2', 
    '10110011': '\xb3', 
    '10110100': '\xb4', 
    '10110101': '\xb5', 
    '10110110': '\xb6', 
    '10110111': '\xb7', 
    '10111000': '\xb8', 
    '10111001': '\xb9', 
    '10111010': '\xba', 
    '10111011': '\xbb', 
    '10111100': '\xbc', 
    '10111101': '\xbd', 
    '10111110': '\xbe', 
    '10111111': '\xbf', 
    '11000000': '\xc0', 
    '11000001': '\xc1', 
    '11000010': '\xc2', 
    '11000011': '\xc3', 
    '11000100': '\xc4', 
    '11000101': '\xc5', 
    '11000110': '\xc6', 
    '11000111': '\xc7', 
    '11001000': '\xc8', 
    '11001001': '\xc9', 
    '11001010': '\xca', 
    '11001011': '\xcb', 
    '11001100': '\xcc', 
    '11001101': '\xcd', 
    '11001110': '\xce', 
    '11001111': '\xcf', 
    '11010000': '\xd0', 
    '11010001': '\xd1', 
    '11010010': '\xd2', 
    '11010011': '\xd3', 
    '11010100': '\xd4', 
    '11010101': '\xd5', 
    '11010110': '\xd6', 
    '11010111': '\xd7', 
    '11011000': '\xd8', 
    '11011001': '\xd9', 
    '11011010': '\xda', 
    '11011011': '\xdb', 
    '11011100': '\xdc', 
    '11011101': '\xdd', 
    '11011110': '\xde', 
    '11011111': '\xdf', 
    '11100000': '\xe0', 
    '11100001': '\xe1', 
    '11100010': '\xe2', 
    '11100011': '\xe3', 
    '11100100': '\xe4', 
    '11100101': '\xe5', 
    '11100110': '\xe6', 
    '11100111': '\xe7', 
    '11101000': '\xe8', 
    '11101001': '\xe9', 
    '11101010': '\xea', 
    '11101011': '\xeb', 
    '11101100': '\xec', 
    '11101101': '\xed', 
    '11101110': '\xee', 
    '11101111': '\xef', 
    '11110000': '\xf0', 
    '11110001': '\xf1', 
    '11110010': '\xf2', 
    '11110011': '\xf3', 
    '11110100': '\xf4', 
    '11110101': '\xf5', 
    '11110110': '\xf6', 
    '11110111': '\xf7', 
    '11111000': '\xf8', 
    '11111001': '\xf9', 
    '11111010': '\xfa', 
    '11111011': '\xfb', 
    '11111100': '\xfc', 
    '11111101': '\xfd', 
    '11111110': '\xfe', 
    '11111111': '\xff'
  }
  return asciiLookup[binStr]  #Return the apropriate char

def b2ascii(binStr):  #Takes in a binary string, outputs it in extended ascii
  out = ''  #Empty string
  for i in range(int(len(binStr)/8)):  #Loop through the bytes in binStr
    temp = ''  #Temporary empty string
    for ii in range(8):  #Loop within each byte in binStr
      temp = temp + binStr[8*i+ii]  #Append these bits to temp
    out = out + bin2asc(temp)  #Convert temp to char and append to out
  return out  #Return the convered string
